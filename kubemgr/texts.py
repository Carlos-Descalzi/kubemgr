from cdtui import ansi

CLUSTERS_CONFIG_EMPTY_TEMPLATE = """#This is an autogenerated template, use the following entries as sample.
[Place here your cluster name]
configfile=path/to/your/cluster/file
"""
CLUSTERS_CONFIG_TEMPLATE = """#This is an autogenerated template.
[{cluster_name}]
configfile={cluster_file}
"""

KUBEMGR_DEFAUL_CONFIG_TEMPLATE = """[general]
# Editor for yaml resource files
editor=/usr/bin/vim
# Viewer for yaml and logs, if not set uses internal viewer (I haven't put too much effort on it).
viewer=/usr/bin/view
[tabs]
# Fixed tab, allows basic customizing
# Uses basic python formatting with some exceptions.
# MAX is replaced by the available width.
podstab.format=item.metadata.name:MAX,item.status.phase:>10

# Custom tabs
# You can add more tabs by specifying a title, resource kind and group_version (AKA version). 
# The prefix (tabN) is just for differentiating them.
tab1.title=Cronjobs
tab1.kind=CronJob
tab1.group_version=batch/v1beta1

tab2.title=Jobs
tab2.kind=Job
tab2.group_version=batch/v1

tab3.title=Services
tab3.kind=Service
tab3.group_version=v1

tab4.title=Deployments
tab4.kind=Deployment
tab4.group_version=apps/v1

tab5.title=DaemonSets
tab5.kind=DaemonSet
tab5.group_version=apps/v1

tab6.title=ConfigMaps
tab6.kind=ConfigMap
tab6.group_version=v1

tab7.title=Secrets
tab7.kind=Secret
tab7.group_version=v1
"""
HELP_CONTENTS = f"""
{ansi.BOLD}Help:{ansi.RESET}
{ansi.BOLD}====={ansi.RESET}

{ansi.UNDERLINE}Keys:{ansi.RESET}
    h                : Show this help.
    tab              : cycles focus across UI components.
    esc              : Closes popup if open, otherwise 
                       closes the application.
    cursor up/down   : move across items in different lists.
    cursor left/right: switch across pods/cronjobs/jobs/etc. 
                       in main view when focused.
    for nodes, namespaces, pods, cronjobs, etc:
        v: display resource as Yaml
        V: display resource using custom template if defined.
        e: Opens editor to edit resource.
        d: Deletes de selected resource.
        c: Creates/updates a kubernetes resource from a yaml file.
        f: Edit filters for a given view
    for pods:
        l: View pod logs.
    for nodes:
        l: view labels for node.
    for namespaces:
        enter: toggle namespace filter, all other views will 
               filter its item by selected namespace

{ansi.UNDERLINE}Configuration files:{ansi.RESET}

    {ansi.BOLD}$HOME/.kubemgr/kubemgr.ini:{ansi.RESET} 
        General configuration file.
        editor=Absolute path to editor used for Yaml

    {ansi.BOLD}$HOME/.kubemgr/clusters.ini:{ansi.RESET} 
        Clusters configuration file.
        [Cluster name enclosed in brackets]
        configfile=[Absolute path to kubeconfig yaml file]

    {ansi.BOLD}$HOME/.kubemgr/colors.ini:{ansi.RESET}
        UI colors and styles.
"""

POD_TEMPLATE = """
{% if item.status.phase == 'Running'%}
\u001b[37m
{% elif item.status.phase == 'Pending' %}
\u001b[33m
{% elif item.status.phase == 'Succeeded' %}
\u001b[32m
{% elif item.status.phase == 'Unknown' %}
\u001b[31;1m
{% else %}
\u001b[31m
{% endif %}
{{fill(item.metadata.name,width-22)}}
{{fill(item.status.reason or item.status.phase,-12)}}
{{fill(age(item.metadata.creationTimestamp),-10)}}
\u001b[37m
"""
CRONJOB_TEMPLATE = """
{{fill(item.metadata.name,width-25)}}
{{fill(item.spec.schedule,-15)}}
{{fill(age(item.metadata.creationTimestamp),-10)}}
"""

SERVICE_TEMPLATE = """
{{fill(item.metadata.name,width-35)}}
{{fill(item.spec.type,-10)}}
{{fill(item.spec.clusterIP,-15)}}
{{fill(age(item.metadata.creationTimestamp),-10)}}
"""
CONFIGMAP_TEMPLATE = """
{{fill(item.metadata.name,width-30)}}
{{fill(item.metadata.namespace,-20)}}
{{fill(age(item.metadata.creationTimestamp),-10)}}
"""
DAEMONSET_TEMPLATE = """
{{fill(item.metadata.name,width-15)}}
{{fill(str(item.status.currentNumberScheduled),-2)}}/
{{fill(str(item.status.desiredNumberScheduled),-2)}}
{{fill(age(item.metadata.creationTimestamp),-10)}}
"""
SECRET_TEMPLATE = """
{{fill(item.metadata.name,width-30)}}
{{fill(item.type,-20)}}
{{fill(age(item.metadata.creationTimestamp),-10)}}
"""
TEMPLATES = {
    "Pod": POD_TEMPLATE,
    "CronJob": CRONJOB_TEMPLATE,
    "Service": SERVICE_TEMPLATE,
    "ConfigMap": CONFIGMAP_TEMPLATE,
    "Secret": SECRET_TEMPLATE,
    "DaemonSet": DAEMONSET_TEMPLATE,
}

FILTER_TEMPLATE = """{#
 Resource Filters
 ================
 The contents of this file will be evaluated as a Jinja template.
 The result must be a boolean value.
 Comment lines are ignored.
 The resources being filtered are exposed to jinja context as the variable "item".
 For example:
 item.metadata.name == 'pod1'
#}
{{ True }}
"""
GLOBAL_FILTER_TEMPLATE = """{#
 Global Resource Filters
 =======================
 The contents of this file will be evaluated as a Jinja template.
 The result must be a boolean value.
 Comment lines are ignored.
 This is a global filter, so consider to filter by fields common to all resources.
 The resources being filtered are exposed to jinja context as the variable "item".
 For example:
 item.metadata.name == 'pod1'
#}
{{ True }}
"""
